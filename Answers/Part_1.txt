Question 1.

Output:
3. O(N + M) time, O(1) space

Explanation: 
The first loop is O(N) and the second loop is O(M). 
Since we don’t know which is bigger, we say this is O(N + M).
This can also be written as O(max(N, M)).
Since there is no additional space being utilized, the space complexity is constant / O(1)






Question 2.

Output:
4. O(N*N)

Explanation:
The above code runs total no of times
= N + (N – 1) + (N – 2) + … 1 + 0
= N * (N + 1) / 2
=(N^N)+(N)/2
We take higher polynomial which will be 2 i.e (N^N).






Question 3.

Output:
2. O(nLogn)

Explanation:
If you notice, j keeps doubling till it is less than or equal to n.
Number of times, we can double a number till it is less than n would be log(n).
Let’s take the examples here.
for n = 16, j = 2, 4, 8, 16
for n = 32, j = 2, 4, 8, 16, 32
So, j would run for O(log n) steps.
i runs for n/2 steps.
So, total steps = O(n/ 2 * log (n)) = O(n*logn)








Question 4.

Output:
2. O(nLogn)

For first loop is O(n).
For i = 1, the inner loop is executed n times.
For i = 2, the inner loop is executed approximately n/2 times.
For i = 3, the inner loop is executed approximately n/3 times.
For i = 4, the inner loop is executed approximately n/4 times.
…………………………………………………….
…………………………………………………….
For i = n, the inner loop is executed approximately n/n times.

So the total time complexity of the above algorithm is (n + n/2 + n/3 + … + n/n)
Which becomes n * (1/1 + 1/2 + 1/3 + … + 1/n)

The important thing about series (1/1 + 1/2 + 1/3 + … + 1/n) is, it is equal to Θ(Logn).
 So the time complexity of the above code is Θ(nLogn).










Question 5.

Output:
4. O(log N)

Explanation: 
We have to find the smallest x such that N / 2^x N
x = log(N)

